---
source: crates/react_hermes_parser/tests/parser_test.rs
expression: "format!(\"Input:\\n{input}\\n\\nOutput:\\n{output}\")"
input_file: crates/react_hermes_parser/tests/fixtures/uninitialized-declaration-in-reactive-scope.js
---
Input:
function Component(props) {
  let x = mutate();
  let y;
  foo(x);
  return [y, x];
}


Output:
{
  "type": "Program",
  "body": [
    {
      "type": "FunctionDeclaration",
      "id": {
        "type": "Identifier",
        "name": "Component",
        "typeAnnotation": null,
        "loc": null,
        "range": [
          9,
          18
        ]
      },
      "params": [
        {
          "type": "Identifier",
          "name": "props",
          "typeAnnotation": null,
          "loc": null,
          "range": [
            19,
            24
          ]
        }
      ],
      "body": {
        "type": "BlockStatement",
        "body": [
          {
            "type": "VariableDeclaration",
            "kind": "let",
            "declarations": [
              {
                "type": "VariableDeclarator",
                "id": {
                  "type": "Identifier",
                  "name": "x",
                  "typeAnnotation": null,
                  "loc": null,
                  "range": [
                    34,
                    35
                  ]
                },
                "init": {
                  "type": "CallExpression",
                  "callee": {
                    "type": "Identifier",
                    "name": "mutate",
                    "typeAnnotation": null,
                    "loc": null,
                    "range": [
                      38,
                      44
                    ]
                  },
                  "arguments": [],
                  "loc": null,
                  "range": [
                    38,
                    46
                  ]
                },
                "loc": null,
                "range": [
                  34,
                  46
                ]
              }
            ],
            "loc": null,
            "range": [
              30,
              47
            ]
          },
          {
            "type": "VariableDeclaration",
            "kind": "let",
            "declarations": [
              {
                "type": "VariableDeclarator",
                "id": {
                  "type": "Identifier",
                  "name": "y",
                  "typeAnnotation": null,
                  "loc": null,
                  "range": [
                    54,
                    55
                  ]
                },
                "init": null,
                "loc": null,
                "range": [
                  54,
                  55
                ]
              }
            ],
            "loc": null,
            "range": [
              50,
              56
            ]
          },
          {
            "type": "ExpressionStatement",
            "expression": {
              "type": "CallExpression",
              "callee": {
                "type": "Identifier",
                "name": "foo",
                "typeAnnotation": null,
                "loc": null,
                "range": [
                  59,
                  62
                ]
              },
              "arguments": [
                {
                  "type": "Identifier",
                  "name": "x",
                  "typeAnnotation": null,
                  "loc": null,
                  "range": [
                    63,
                    64
                  ]
                }
              ],
              "loc": null,
              "range": [
                59,
                65
              ]
            },
            "directive": null,
            "loc": null,
            "range": [
              59,
              66
            ]
          },
          {
            "type": "ReturnStatement",
            "argument": {
              "type": "ArrayExpression",
              "elements": [
                {
                  "type": "Identifier",
                  "name": "y",
                  "typeAnnotation": null,
                  "loc": null,
                  "range": [
                    77,
                    78
                  ]
                },
                {
                  "type": "Identifier",
                  "name": "x",
                  "typeAnnotation": null,
                  "loc": null,
                  "range": [
                    80,
                    81
                  ]
                }
              ],
              "loc": null,
              "range": [
                76,
                82
              ]
            },
            "loc": null,
            "range": [
              69,
              83
            ]
          }
        ],
        "loc": null,
        "range": [
          26,
          85
        ]
      },
      "generator": false,
      "async": false,
      "loc": null,
      "range": [
        0,
        85
      ],
      "loc": null,
      "range": [
        0,
        85
      ]
    }
  ],
  "sourceType": "script",
  "loc": null,
  "range": [
    0,
    85
  ]
}
