---
source: crates/react_hermes_parser/tests/parser_test.rs
expression: "format!(\"Input:\\n{input}\\n\\nOutput:\\n{output}\")"
input_file: crates/react_hermes_parser/tests/fixtures/ssa-newexpression.js
---
Input:
function Foo() {}

function Component(props) {
  const a = [];
  const b = {};
  let c = new Foo(a, b);
  return c;
}


Output:
{
  "type": "Program",
  "body": [
    {
      "type": "FunctionDeclaration",
      "id": {
        "type": "Identifier",
        "name": "Foo",
        "typeAnnotation": null,
        "loc": null,
        "range": [
          9,
          12
        ]
      },
      "params": [],
      "body": {
        "type": "BlockStatement",
        "body": [],
        "loc": null,
        "range": [
          15,
          17
        ]
      },
      "generator": false,
      "async": false,
      "loc": null,
      "range": [
        0,
        17
      ],
      "loc": null,
      "range": [
        0,
        17
      ]
    },
    {
      "type": "FunctionDeclaration",
      "id": {
        "type": "Identifier",
        "name": "Component",
        "typeAnnotation": null,
        "loc": null,
        "range": [
          28,
          37
        ]
      },
      "params": [
        {
          "type": "Identifier",
          "name": "props",
          "typeAnnotation": null,
          "loc": null,
          "range": [
            38,
            43
          ]
        }
      ],
      "body": {
        "type": "BlockStatement",
        "body": [
          {
            "type": "VariableDeclaration",
            "kind": "const",
            "declarations": [
              {
                "type": "VariableDeclarator",
                "id": {
                  "type": "Identifier",
                  "name": "a",
                  "typeAnnotation": null,
                  "loc": null,
                  "range": [
                    55,
                    56
                  ]
                },
                "init": {
                  "type": "ArrayExpression",
                  "elements": [],
                  "loc": null,
                  "range": [
                    59,
                    61
                  ]
                },
                "loc": null,
                "range": [
                  55,
                  61
                ]
              }
            ],
            "loc": null,
            "range": [
              49,
              62
            ]
          },
          {
            "type": "VariableDeclaration",
            "kind": "const",
            "declarations": [
              {
                "type": "VariableDeclarator",
                "id": {
                  "type": "Identifier",
                  "name": "b",
                  "typeAnnotation": null,
                  "loc": null,
                  "range": [
                    71,
                    72
                  ]
                },
                "init": {
                  "type": "ObjectExpression",
                  "properties": [],
                  "loc": null,
                  "range": [
                    75,
                    77
                  ]
                },
                "loc": null,
                "range": [
                  71,
                  77
                ]
              }
            ],
            "loc": null,
            "range": [
              65,
              78
            ]
          },
          {
            "type": "VariableDeclaration",
            "kind": "let",
            "declarations": [
              {
                "type": "VariableDeclarator",
                "id": {
                  "type": "Identifier",
                  "name": "c",
                  "typeAnnotation": null,
                  "loc": null,
                  "range": [
                    85,
                    86
                  ]
                },
                "init": {
                  "type": "NewExpression",
                  "callee": {
                    "type": "Identifier",
                    "name": "Foo",
                    "typeAnnotation": null,
                    "loc": null,
                    "range": [
                      93,
                      96
                    ]
                  },
                  "arguments": [
                    {
                      "type": "Identifier",
                      "name": "a",
                      "typeAnnotation": null,
                      "loc": null,
                      "range": [
                        97,
                        98
                      ]
                    },
                    {
                      "type": "Identifier",
                      "name": "b",
                      "typeAnnotation": null,
                      "loc": null,
                      "range": [
                        100,
                        101
                      ]
                    }
                  ],
                  "loc": null,
                  "range": [
                    89,
                    102
                  ]
                },
                "loc": null,
                "range": [
                  85,
                  102
                ]
              }
            ],
            "loc": null,
            "range": [
              81,
              103
            ]
          },
          {
            "type": "ReturnStatement",
            "argument": {
              "type": "Identifier",
              "name": "c",
              "typeAnnotation": null,
              "loc": null,
              "range": [
                113,
                114
              ]
            },
            "loc": null,
            "range": [
              106,
              115
            ]
          }
        ],
        "loc": null,
        "range": [
          45,
          117
        ]
      },
      "generator": false,
      "async": false,
      "loc": null,
      "range": [
        19,
        117
      ],
      "loc": null,
      "range": [
        19,
        117
      ]
    }
  ],
  "sourceType": "script",
  "loc": null,
  "range": [
    0,
    117
  ]
}
