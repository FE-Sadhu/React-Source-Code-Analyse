---
source: crates/react_hermes_parser/tests/parser_test.rs
expression: "format!(\"Input:\\n{input}\\n\\nOutput:\\n{output}\")"
input_file: crates/react_hermes_parser/tests/fixtures/ssa-non-empty-initializer.js
---
Input:
function foo(a, b) {
  let x = [];
  if (a) {
    x = 1;
  }

  let y = x;
  return y;
}


Output:
{
  "type": "Program",
  "body": [
    {
      "type": "FunctionDeclaration",
      "id": {
        "type": "Identifier",
        "name": "foo",
        "typeAnnotation": null,
        "loc": null,
        "range": [
          9,
          12
        ]
      },
      "params": [
        {
          "type": "Identifier",
          "name": "a",
          "typeAnnotation": null,
          "loc": null,
          "range": [
            13,
            14
          ]
        },
        {
          "type": "Identifier",
          "name": "b",
          "typeAnnotation": null,
          "loc": null,
          "range": [
            16,
            17
          ]
        }
      ],
      "body": {
        "type": "BlockStatement",
        "body": [
          {
            "type": "VariableDeclaration",
            "kind": "let",
            "declarations": [
              {
                "type": "VariableDeclarator",
                "id": {
                  "type": "Identifier",
                  "name": "x",
                  "typeAnnotation": null,
                  "loc": null,
                  "range": [
                    27,
                    28
                  ]
                },
                "init": {
                  "type": "ArrayExpression",
                  "elements": [],
                  "loc": null,
                  "range": [
                    31,
                    33
                  ]
                },
                "loc": null,
                "range": [
                  27,
                  33
                ]
              }
            ],
            "loc": null,
            "range": [
              23,
              34
            ]
          },
          {
            "type": "IfStatement",
            "test": {
              "type": "Identifier",
              "name": "a",
              "typeAnnotation": null,
              "loc": null,
              "range": [
                41,
                42
              ]
            },
            "consequent": {
              "type": "BlockStatement",
              "body": [
                {
                  "type": "ExpressionStatement",
                  "expression": {
                    "type": "AssignmentExpression",
                    "operator": "=",
                    "left": {
                      "type": "Identifier",
                      "name": "x",
                      "typeAnnotation": null,
                      "loc": null,
                      "range": [
                        50,
                        51
                      ]
                    },
                    "right": {
                      "type": "NumericLiteral",
                      "value": 1.0,
                      "loc": null,
                      "range": [
                        54,
                        55
                      ]
                    },
                    "loc": null,
                    "range": [
                      50,
                      55
                    ]
                  },
                  "directive": null,
                  "loc": null,
                  "range": [
                    50,
                    56
                  ]
                }
              ],
              "loc": null,
              "range": [
                44,
                60
              ]
            },
            "alternate": null,
            "loc": null,
            "range": [
              37,
              60
            ]
          },
          {
            "type": "VariableDeclaration",
            "kind": "let",
            "declarations": [
              {
                "type": "VariableDeclarator",
                "id": {
                  "type": "Identifier",
                  "name": "y",
                  "typeAnnotation": null,
                  "loc": null,
                  "range": [
                    68,
                    69
                  ]
                },
                "init": {
                  "type": "Identifier",
                  "name": "x",
                  "typeAnnotation": null,
                  "loc": null,
                  "range": [
                    72,
                    73
                  ]
                },
                "loc": null,
                "range": [
                  68,
                  73
                ]
              }
            ],
            "loc": null,
            "range": [
              64,
              74
            ]
          },
          {
            "type": "ReturnStatement",
            "argument": {
              "type": "Identifier",
              "name": "y",
              "typeAnnotation": null,
              "loc": null,
              "range": [
                84,
                85
              ]
            },
            "loc": null,
            "range": [
              77,
              86
            ]
          }
        ],
        "loc": null,
        "range": [
          19,
          88
        ]
      },
      "generator": false,
      "async": false,
      "loc": null,
      "range": [
        0,
        88
      ],
      "loc": null,
      "range": [
        0,
        88
      ]
    }
  ],
  "sourceType": "script",
  "loc": null,
  "range": [
    0,
    88
  ]
}
