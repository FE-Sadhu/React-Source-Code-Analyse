---
source: crates/react_semantic_analysis/tests/analysis_test.rs
expression: "format!(\"Input:\\n{input}\\n\\nAnalysis:\\n{output}\")"
input_file: crates/react_semantic_analysis/tests/fixtures/let-const-hoisting.js
---
Input:
function Component() {
  function foo() {
    a;
    b;
  }
  let a;
  const b = true;
}


Analysis:
ScopeManager {
    globals: [
        (
            "Array",
            DeclarationId(
                0,
            ),
        ),
        (
            "Boolean",
            DeclarationId(
                1,
            ),
        ),
        (
            "console",
            DeclarationId(
                2,
            ),
        ),
        (
            "global",
            DeclarationId(
                3,
            ),
        ),
        (
            "Math",
            DeclarationId(
                4,
            ),
        ),
        (
            "Number",
            DeclarationId(
                5,
            ),
        ),
        (
            "setInterval",
            DeclarationId(
                6,
            ),
        ),
        (
            "setTimeout",
            DeclarationId(
                7,
            ),
        ),
        (
            "String",
            DeclarationId(
                8,
            ),
        ),
    ],
    root: Scope {
        id: ScopeId(
            0,
        ),
        kind: Module,
        declarations: {
            "Component": Declaration {
                id: DeclarationId(
                    9,
                ),
                kind: Function,
                scope: ScopeId(
                    0,
                ),
            },
        },
        references: [],
        children: [
            Scope {
                id: ScopeId(
                    1,
                ),
                kind: Function,
                declarations: {
                    "foo": Declaration {
                        id: DeclarationId(
                            10,
                        ),
                        kind: Function,
                        scope: ScopeId(
                            1,
                        ),
                    },
                    "a": Declaration {
                        id: DeclarationId(
                            11,
                        ),
                        kind: Let,
                        scope: ScopeId(
                            1,
                        ),
                    },
                    "b": Declaration {
                        id: DeclarationId(
                            12,
                        ),
                        kind: Const,
                        scope: ScopeId(
                            1,
                        ),
                    },
                },
                references: [],
                children: [
                    Scope {
                        id: ScopeId(
                            2,
                        ),
                        kind: Function,
                        declarations: {},
                        references: [
                            Reference {
                                id: ReferenceId(
                                    0,
                                ),
                                kind: Read,
                                declaration: DeclarationId(
                                    11,
                                ),
                                declaration (name): "a",
                                scope: ScopeId(
                                    2,
                                ),
                            },
                            Reference {
                                id: ReferenceId(
                                    1,
                                ),
                                kind: Read,
                                declaration: DeclarationId(
                                    12,
                                ),
                                declaration (name): "b",
                                scope: ScopeId(
                                    2,
                                ),
                            },
                        ],
                        children: [],
                    },
                ],
            },
        ],
    },
}

