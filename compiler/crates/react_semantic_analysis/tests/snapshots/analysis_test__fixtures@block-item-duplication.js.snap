---
source: crates/react_semantic_analysis/tests/analysis_test.rs
expression: "format!(\"Input:\\n{input}\\n\\nAnalysis:\\n{output}\")"
input_file: crates/react_semantic_analysis/tests/fixtures/block-item-duplication.js
---
Input:
function Component() {
  let a = 1;
  let a = 2; // error

  const b = 3;
  const b = 4; // error

  function foo() {}
  function foo() {} // error

  try {
  } catch (c) {
    let c = true; // error
    const c = true; // error
    function c() {} // error
    // class c {} // error
  }
}

function Component() {
  // error
}

const x = true;
const x = false; // error


Analysis:
ScopeManager {
    globals: [
        (
            "Array",
            DeclarationId(
                0,
            ),
        ),
        (
            "Boolean",
            DeclarationId(
                1,
            ),
        ),
        (
            "console",
            DeclarationId(
                2,
            ),
        ),
        (
            "global",
            DeclarationId(
                3,
            ),
        ),
        (
            "Math",
            DeclarationId(
                4,
            ),
        ),
        (
            "Number",
            DeclarationId(
                5,
            ),
        ),
        (
            "setInterval",
            DeclarationId(
                6,
            ),
        ),
        (
            "setTimeout",
            DeclarationId(
                7,
            ),
        ),
        (
            "String",
            DeclarationId(
                8,
            ),
        ),
    ],
    root: Scope {
        id: ScopeId(
            0,
        ),
        kind: Module,
        declarations: {
            "Component": Declaration {
                id: DeclarationId(
                    9,
                ),
                kind: Function,
                scope: ScopeId(
                    0,
                ),
            },
            "x": Declaration {
                id: DeclarationId(
                    21,
                ),
                kind: Const,
                scope: ScopeId(
                    0,
                ),
            },
        },
        references: [],
        children: [
            Scope {
                id: ScopeId(
                    1,
                ),
                kind: Function,
                declarations: {
                    "a": Declaration {
                        id: DeclarationId(
                            10,
                        ),
                        kind: Let,
                        scope: ScopeId(
                            1,
                        ),
                    },
                    "b": Declaration {
                        id: DeclarationId(
                            12,
                        ),
                        kind: Const,
                        scope: ScopeId(
                            1,
                        ),
                    },
                    "foo": Declaration {
                        id: DeclarationId(
                            14,
                        ),
                        kind: Function,
                        scope: ScopeId(
                            1,
                        ),
                    },
                    "c": Declaration {
                        id: DeclarationId(
                            19,
                        ),
                        kind: Function,
                        scope: ScopeId(
                            1,
                        ),
                    },
                },
                references: [],
                children: [
                    Scope {
                        id: ScopeId(
                            2,
                        ),
                        kind: Function,
                        declarations: {},
                        references: [],
                        children: [],
                    },
                    Scope {
                        id: ScopeId(
                            3,
                        ),
                        kind: Function,
                        declarations: {},
                        references: [],
                        children: [],
                    },
                    Scope {
                        id: ScopeId(
                            4,
                        ),
                        kind: Block,
                        declarations: {},
                        references: [],
                        children: [],
                    },
                    Scope {
                        id: ScopeId(
                            5,
                        ),
                        kind: CatchClause,
                        declarations: {
                            "c": Declaration {
                                id: DeclarationId(
                                    16,
                                ),
                                kind: CatchClause,
                                scope: ScopeId(
                                    5,
                                ),
                            },
                        },
                        references: [],
                        children: [
                            Scope {
                                id: ScopeId(
                                    6,
                                ),
                                kind: Block,
                                declarations: {
                                    "c": Declaration {
                                        id: DeclarationId(
                                            17,
                                        ),
                                        kind: Let,
                                        scope: ScopeId(
                                            6,
                                        ),
                                    },
                                },
                                references: [],
                                children: [
                                    Scope {
                                        id: ScopeId(
                                            7,
                                        ),
                                        kind: Function,
                                        declarations: {},
                                        references: [],
                                        children: [],
                                    },
                                ],
                            },
                        ],
                    },
                ],
            },
            Scope {
                id: ScopeId(
                    8,
                ),
                kind: Function,
                declarations: {},
                references: [],
                children: [],
            },
        ],
    },
}
Diagnostic(
    DiagnosticData {
        message: "Duplicate declaration",
        span: Some(
            SourceSpan {
                offset: SourceOffset(
                    42,
                ),
                length: 1,
            },
        ),
        related_information: [],
        severity: InvalidSyntax,
        data: [],
    },
)
Diagnostic(
    DiagnosticData {
        message: "Duplicate declaration",
        span: Some(
            SourceSpan {
                offset: SourceOffset(
                    82,
                ),
                length: 1,
            },
        ),
        related_information: [],
        severity: InvalidSyntax,
        data: [],
    },
)
Diagnostic(
    DiagnosticData {
        message: "Duplicate declaration",
        span: Some(
            SourceSpan {
                offset: SourceOffset(
                    130,
                ),
                length: 3,
            },
        ),
        related_information: [],
        severity: InvalidSyntax,
        data: [],
    },
)
Diagnostic(
    DiagnosticData {
        message: "Duplicate declaration",
        span: Some(
            SourceSpan {
                offset: SourceOffset(
                    210,
                ),
                length: 1,
            },
        ),
        related_information: [],
        severity: InvalidSyntax,
        data: [],
    },
)
Diagnostic(
    DiagnosticData {
        message: "Duplicate declaration",
        span: Some(
            SourceSpan {
                offset: SourceOffset(
                    242,
                ),
                length: 1,
            },
        ),
        related_information: [],
        severity: InvalidSyntax,
        data: [],
    },
)
Diagnostic(
    DiagnosticData {
        message: "Duplicate declaration",
        span: Some(
            SourceSpan {
                offset: SourceOffset(
                    301,
                ),
                length: 9,
            },
        ),
        related_information: [],
        severity: InvalidSyntax,
        data: [],
    },
)
Diagnostic(
    DiagnosticData {
        message: "Duplicate declaration",
        span: Some(
            SourceSpan {
                offset: SourceOffset(
                    351,
                ),
                length: 1,
            },
        ),
        related_information: [],
        severity: InvalidSyntax,
        data: [],
    },
)

