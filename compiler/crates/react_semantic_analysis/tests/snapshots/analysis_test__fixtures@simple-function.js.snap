---
source: crates/react_semantic_analysis/tests/analysis_test.rs
expression: "format!(\"Input:\\n{input}\\n\\nAnalysis:\\n{output}\")"
input_file: crates/react_semantic_analysis/tests/fixtures/simple-function.js
---
Input:
function Component(a) {
  Math;
  let b = 0;
  const foo = function foo_(c) {
    let d = 1;
    return a + b + c + d;
  };
  return foo();
}


Analysis:
ScopeManager {
    globals: [
        (
            "Array",
            DeclarationId(
                0,
            ),
        ),
        (
            "Boolean",
            DeclarationId(
                1,
            ),
        ),
        (
            "console",
            DeclarationId(
                2,
            ),
        ),
        (
            "global",
            DeclarationId(
                3,
            ),
        ),
        (
            "Math",
            DeclarationId(
                4,
            ),
        ),
        (
            "Number",
            DeclarationId(
                5,
            ),
        ),
        (
            "setInterval",
            DeclarationId(
                6,
            ),
        ),
        (
            "setTimeout",
            DeclarationId(
                7,
            ),
        ),
        (
            "String",
            DeclarationId(
                8,
            ),
        ),
    ],
    root: Scope {
        id: ScopeId(
            0,
        ),
        kind: Module,
        declarations: {
            "Component": Declaration {
                id: DeclarationId(
                    9,
                ),
                kind: Function,
                scope: ScopeId(
                    0,
                ),
            },
        },
        references: [],
        children: [
            Scope {
                id: ScopeId(
                    1,
                ),
                kind: Function,
                declarations: {
                    "a": Declaration {
                        id: DeclarationId(
                            10,
                        ),
                        kind: Function,
                        scope: ScopeId(
                            1,
                        ),
                    },
                    "b": Declaration {
                        id: DeclarationId(
                            11,
                        ),
                        kind: Let,
                        scope: ScopeId(
                            1,
                        ),
                    },
                    "foo": Declaration {
                        id: DeclarationId(
                            12,
                        ),
                        kind: Const,
                        scope: ScopeId(
                            1,
                        ),
                    },
                },
                references: [
                    Reference {
                        id: ReferenceId(
                            0,
                        ),
                        kind: Read,
                        declaration: DeclarationId(
                            4,
                        ),
                        declaration (name): "Math",
                        scope: ScopeId(
                            1,
                        ),
                    },
                    Reference {
                        id: ReferenceId(
                            5,
                        ),
                        kind: Read,
                        declaration: DeclarationId(
                            12,
                        ),
                        declaration (name): "foo",
                        scope: ScopeId(
                            1,
                        ),
                    },
                ],
                children: [
                    Scope {
                        id: ScopeId(
                            2,
                        ),
                        kind: Function,
                        declarations: {
                            "foo_": Declaration {
                                id: DeclarationId(
                                    13,
                                ),
                                kind: Function,
                                scope: ScopeId(
                                    2,
                                ),
                            },
                            "c": Declaration {
                                id: DeclarationId(
                                    14,
                                ),
                                kind: Function,
                                scope: ScopeId(
                                    2,
                                ),
                            },
                            "d": Declaration {
                                id: DeclarationId(
                                    15,
                                ),
                                kind: Let,
                                scope: ScopeId(
                                    2,
                                ),
                            },
                        },
                        references: [
                            Reference {
                                id: ReferenceId(
                                    1,
                                ),
                                kind: Read,
                                declaration: DeclarationId(
                                    10,
                                ),
                                declaration (name): "a",
                                scope: ScopeId(
                                    2,
                                ),
                            },
                            Reference {
                                id: ReferenceId(
                                    2,
                                ),
                                kind: Read,
                                declaration: DeclarationId(
                                    11,
                                ),
                                declaration (name): "b",
                                scope: ScopeId(
                                    2,
                                ),
                            },
                            Reference {
                                id: ReferenceId(
                                    3,
                                ),
                                kind: Read,
                                declaration: DeclarationId(
                                    14,
                                ),
                                declaration (name): "c",
                                scope: ScopeId(
                                    2,
                                ),
                            },
                            Reference {
                                id: ReferenceId(
                                    4,
                                ),
                                kind: Read,
                                declaration: DeclarationId(
                                    15,
                                ),
                                declaration (name): "d",
                                scope: ScopeId(
                                    2,
                                ),
                            },
                        ],
                        children: [],
                    },
                ],
            },
        ],
    },
}

